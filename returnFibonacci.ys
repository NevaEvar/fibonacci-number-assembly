
#ensimmäisiä iteraatioita koodista. Tarvittavat opiskelija tiedot lisätään myöhemmissä versioissa. 



main:
    
    irmovq pino, %rsp   #osoitin    
    irmovq pino, %rbp   #alku
    irmovq $0x700, %rsi
    
    irmovq $1, %r10     #vakio 1 arvo
    irmovq $0, %r14     #vakio 0 arvo
    irmovq $8, %rdx     #muisti välin hyppyä varten
    
#käy listan läpi ja lähettää rcx rekisterin arvon isFibonacciNumber:iin, joka palauttaa 0 tai 1. 
listLoop:
    mrmovq (%rsi), %rcx
    addq %rdx, %rsi
    xorq %r14, %rcx
    je done
    
    rrmovq %rcx, %r9
    
    #tallennetaa muut luvut pinoon.
    pushq %r9
    pushq %rsi
    pushq %r10
    pushq %r14
    pushq %rdx
    
    call isFibonacciNumber    #palauttaa 0 tai 1 rcx rekisteriin
    
    #sijoittaa pinosta rekisteri arvot takaisin paikoilleen
    popq %rdx
    popq %r14
    popq %r10
    popq %rsi
    popq %r9
    
    #tarkistaa onko luku fibonacci luku ja jos ei lopettaa testin.
    xorq %r14, %rcx
    je interuptedDone 
    
    jmp listLoop
    
    
#ottaa ja palauttaa rcx rekisterin
.pos 0x200 
isFibonacciNumber:

    #alusttetaan vakio arvoja
    irmovq $0, %r14
    irmovq $4, %r9
    
    rrmovq %rcx, %r11
    rrmovq %rcx, %r12
    
    #tallettaa pinoon muuttujat ja palauttaa ne kutsunnan jälkeen.
    pushq %r14
    pushq %r9
    call multiply
    irmovq $5, %r11
    rrmovq %rax, %r12
    call multiply
    popq %r9
    popq %r14
    
    
    rrmovq %rax, %r13 #sisältää kerrotun arvon
    addq %r9, %rax  # +4
    
    pushq %r13 
    pushq %r14
    pushq %r9
    call isPerfectSquare  #palauttaa 0 tai 1 riippuen onko täydellinen neliö. 
    popq %r9
    popq %r14
    popq %r13 
    
    xorq %r14, %rax 
    jne isFibonacciNumberDone  #toteutuu jos rcx on fibonacci number. 
    
    rrmovq %r13, %rax
    subq %r9, %rax  #-4
   
    pushq %r14
    pushq %r9
    call isPerfectSquare  #palauttaa 0 tai 1 riippuen onko täydellinen neliö. 
    popq %r9
    popq %r14
    
    xorq %r14, %rax 
    jne isFibonacciNumberDone
    
    irmovq $0, %rcx        #toteutuu jos rcx ei ole fibonacci number.
    
    ret
    
    isFibonacciNumberDone:
        irmovq $1, %rcx 
        ret
    
    
    

#ottaa rax rekisteristä arvon ja palauttaa 0 tai 1 samaan rekisteriin.
.pos 0x300
isPerfectSquare:
    
    rrmovq %rax, %r12
    pushq %rax
    call squareRoot #palauttaa sqrt(r12) arvon rcx rekisteriin
    popq %rax
    
    rrmovq %rax, %rbx
    pushq %rbx
    rrmovq %rcx, %r11
    rrmovq %rcx, %r12 
    call multiply   #palauttaa kerrotun arvon 
    popq %rbx       #sisältää x:n arvon 
    
    subq %rax, %rbx 
    je actuallyIs   #toteutuu jos oikeasti on täydellinen neliö
    
    irmovq $0, %rax
    ret 
    
    actuallyIs:
        irmovq $1, %rax
        ret
   
   
   
#ottaa r11 ja r12 rekistereistä arvon ja palauttaa sen rax rekisteriin.
.pos 0x400
multiply:
    irmovq $0, %rax         #tyhjennetään rax rekisteri
    irmovq $0, %rbx         #counter for shifting
    irmovq $1, %r10         #+- 1 vakio
    irmovq $0, %r14         #vakio
    
    findingShift:
    irmovq $0x1, %rdx
        
        fsl:
            rrmovq %rdx, %rcx
            addq %rdx, %rdx
            rrmovq %r12, %r9
            addq %r10, %rbx         #tulee sisältämään kuinka monta kertaa shiftataan
            subq %rdx, %r9
            jge fsl
            
            subq %rcx, %r12
            
            jl multiplyDone
        
        
    
    
    shift:
        rrmovq %r11, %r9
        subq %r10, %rbx
        je lastLoop
        sl:
            addq %r9, %r9
            subq %r10, %rbx
            jne sl
        
        
    
    
    add: 
        addq %r9, %rax
        jmp findingShift
        
        
    
    lastLoop:
        addq %r9, %rax
    
    
    multiplyDone:
        ret
    
    
    
    
#ottaa arvon rcx rekisteriin ja palauttaa arvon r12 rekisteriin
.pos 0x500
squareRoot:
    irmovq $0, %r14                 #vakio 0 arvo testejä varten
    irmovq $0, %rcx                 #res muuttuja algoritmissa
    irmovq $0x0000000000010000, %rbx #bit muuttuja algoritmissa
    irmovq $0, %rdx                 #bit muuttujan väli arvo bitAdjLoop:ia varten
    
    irmovq $1, %r10                 #vakio +-1 arvo looppeja varten
    
    
#algoritmin ensimmäinen while looppi (toimii) 

bitAdj:
    
    rrmovq %r12, %rsi               #siirretään testi rekisteriin num arvo
    subq %rbx, %rsi 
    jge resCalc                     #while (bit > num) 
    
    irmovq $0x1, %rdi
    call bitAdjMove
    jmp bitAdj
    

    #siirtää oikealta vasemmalle testi bittiä kunnes menee annetun arvon yli
    #tämä sen takia, koska se on nopeampaa kuin vasemmalta oikealla vieminen jakolaskulla
    .pos 0x600
    bitAdjMove:
        rrmovq %rdi, %r11       
        
        addq %rdi, %rdi
        addq %rdi, %rdi 
        
        rrmovq %rdi, %r8
        subq %rbx, %r8
        jl bitAdjMove
        rrmovq %r11, %rbx
        cmovg %r14, %rbx 
        ret
    
    
#main algo 
resCalc:
    irmovq $0, %r14
    subq %rbx, %r14                 #while (bit != 0) 
    jge squareRootDone
    
    rrmovq %r12, %rsi               #if (num >= res + bit)
    rrmovq %rcx, %r13               #<
    addq %rbx, %r13                 #<
    subq %r13, %rsi                 #< num -= res + bit
    jge calc                        #<
    
    #sisältää else lauseen komennot algosta
    call resMove
    irmovq $0x1, %rdi
    call bitAdjMove
    jmp resCalc

    calc:                           #if sisälmys
        subq %r13, %r12             #< num -= res + bit
        call resMove
        addq %rbx, %rcx
        irmovq $0x1, %rdi
        call bitAdjMove
        jmp resCalc
        
    
    #siirtää %rcx rekisterissä olevan arvon ja palauttaa shiftatun arvon samaan rekisteriin
    .pos 0x800
    resMove:                        
        irmovq $0, %r13             #counter for the addition
        irmovq $0, %r11 
        irmovq $0x1, %rdi 
        irmovq $0, %r14
        
        subq %rcx, %r14
        je zeroEarlyExit            #for the first iteration of main algo
    
        #irrottaa jokaisen bitin erilliseen arvoon ja säilöö sen pinoon
        #0b 1101 olisi pinossa 
        #0b 0001
        #0b 0100
        #0b 1000
        
        removeLoop:
            rrmovq %rdi, %r9
            addq %rdi, %rdi
            rrmovq %rcx, %r8
            subq %rdi, %r8
            jge removeLoop
        
            pushq %r9
            subq %r9, %rcx
            irmovq $0x1, %rdi
            addq %r10, %r13             #pitää huolen pino käydään läpi
        
            irmovq $0, %r14
            subq %rcx, %r14
        
            je constructLoop
            jmp removeLoop
        
        #shiftaa pinosta tehokkaasti yhden bitin oikealle ja kasaa siitä shiftatun arvon
        constructLoop:
            popq %rcx
            irmovq $0x1, %rdi
            
            constructShift:
                rrmovq %rdi, %r9
                addq %rdi, %rdi
                rrmovq %rdi, %r8
                subq %rcx, %r8
                jl constructShift
            
                subq %r9, %r10          #testaa onko r9 0x1
                cmove %r14, %r9         #jos on niin heittää ns tippuvan bitin pois
                irmovq $1, %r10 
            
            addq %r9, %r11              #lisää shiftatun bitin lopulliseen arvoon
            subq %r10, %r13             #pitää huolen pino käydään läpi 
            jne constructLoop
    
            rrmovq %r11, %rcx
            ret
        
        zeroEarlyExit:
            ret
        
        
    squareRootDone:
        ret
        
    
    
interuptedDone:
    rrmovq %r9, %rax 
    halt 
   
done:
    irmovq $0, %rax 
    halt
   
.pos 0x700
array:

.pos 0xa00
pino:
    

